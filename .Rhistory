if (status_code(response) == 200) {
# Converter a resposta JSON para um dataframe
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Transformar JSON em dataframe
licitacoes_df <- as.data.frame(json_data$rows)
# Exibir as primeiras linhas do dataframe
print(head(licitacoes_df))
} else {
cat("Erro ao acessar a API. Código de status:", status_code(response), "\n")
}
View(licitacoes_df)
library(httr)
library(jsonlite)
library(dplyr)
# Definir a URL base da API
base_url <- "https://transparencia.al.gov.br/licitacao/json-editais/"
# Definir parâmetros iniciais
params <- list(
limit = 100,   # Número de registros por requisição
offset = 0,    # Paginação inicial
data_realizacao_dti_ = "01/01/2025",  # Data inicial (dd/mm/yyyy)
data_realizacao_dtf_ = "14/02/2025"   # Data final (dd/mm/yyyy)
)
# Inicializar um dataframe vazio para armazenar os resultados
all_licitacoes <- data.frame()
repeat {
# Fazer a requisição HTTP GET com o cabeçalho necessário
response <- GET(base_url, query = params, add_headers(
`User-Agent` = "Mozilla/5.0",
`X-Requested-With` = "XMLHttpRequest"
))
# Verificar se a requisição foi bem-sucedida
if (status_code(response) == 200) {
# Converter a resposta JSON para texto
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Verificar se há registros na resposta
if (!is.null(json_data$rows) && length(json_data$rows) > 0) {
# Transformar JSON em dataframe e adicionar ao dataframe principal
licitacoes_df <- as.data.frame(json_data$rows)
all_licitacoes <- bind_rows(all_licitacoes, licitacoes_df)
# Atualizar o offset para buscar o próximo lote de registros
params$offset <- params$offset + params$limit
} else {
# Se não houver mais registros, sair do loop
break
}
} else {
cat("Erro ao acessar a API. Código de status:", status_code(response), "\n")
break
}
}
# Exibir as primeiras linhas do dataframe consolidado
print(head(all_licitacoes))
# Salvar os dados em um arquivo CSV (opcional)
write.csv(all_licitacoes, "editais_completos.csv", row.names = FALSE)
cat("Total de registros obtidos:", nrow(all_licitacoes), "\n")
View(licitacoes_df)
View(licitacoes_df)
library(httr)
library(jsonlite)
library(dplyr)
# Definir a URL base da API
base_url <- "https://transparencia.al.gov.br/licitacao/json-editais/"
# Definir parâmetros iniciais
params <- list(
limit = 100,   # Número de registros por requisição
offset = 0,    # Paginação inicial
data_realizacao_dti_ = "01/01/2020",  # Data inicial (dd/mm/yyyy)
data_realizacao_dtf_ = "14/02/2025"   # Data final (dd/mm/yyyy)
)
# Inicializar um dataframe vazio para armazenar os resultados
all_licitacoes <- data.frame()
repeat {
# Fazer a requisição HTTP GET com o cabeçalho necessário
response <- GET(base_url, query = params, add_headers(
`User-Agent` = "Mozilla/5.0",
`X-Requested-With` = "XMLHttpRequest"
))
# Verificar se a requisição foi bem-sucedida
if (status_code(response) == 200) {
# Converter a resposta JSON para texto
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Verificar se há registros na resposta
if (!is.null(json_data$rows) && length(json_data$rows) > 0) {
# Transformar JSON em dataframe e adicionar ao dataframe principal
licitacoes_df <- as.data.frame(json_data$rows)
all_licitacoes <- bind_rows(all_licitacoes, licitacoes_df)
# Atualizar o offset para buscar o próximo lote de registros
params$offset <- params$offset + params$limit
} else {
# Se não houver mais registros, sair do loop
break
}
} else {
cat("Erro ao acessar a API. Código de status:", status_code(response), "\n")
break
}
}
# Exibir as primeiras linhas do dataframe consolidado
print(head(all_licitacoes))
# Salvar os dados em um arquivo CSV (opcional)
write.csv(all_licitacoes, "editais_desde_2020.csv", row.names = FALSE)
cat("Total de registros obtidos:", nrow(all_licitacoes), "\n")
library(httr)
library(jsonlite)
library(dplyr)
# Definir a URL base da API
base_url <- "https://transparencia.al.gov.br/licitacao/json-editais/"
# Inicializar um dataframe vazio para armazenar os resultados
all_licitacoes <- data.frame()
# Loop para buscar dados ano a ano
for (ano in 2020:2025) {
# Definir parâmetros para o intervalo do ano
params <- list(
limit = 100,   # Número de registros por requisição
offset = 0,    # Paginação inicial
data_realizacao_dti_ = paste0("01/01/", ano),  # Data inicial (dd/mm/yyyy)
data_realizacao_dtf_ = paste0("31/12/", ano)   # Data final (dd/mm/yyyy)
)
repeat {
# Fazer a requisição HTTP GET com o cabeçalho necessário
response <- GET(base_url, query = params, add_headers(
`User-Agent` = "Mozilla/5.0",
`X-Requested-With` = "XMLHttpRequest"
))
# Verificar se a requisição foi bem-sucedida
if (status_code(response) == 200) {
# Converter a resposta JSON para texto
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Verificar se há registros na resposta
if (!is.null(json_data$rows) && length(json_data$rows) > 0) {
# Transformar JSON em dataframe e adicionar ao dataframe principal
licitacoes_df <- as.data.frame(json_data$rows)
all_licitacoes <- bind_rows(all_licitacoes, licitacoes_df)
# Atualizar o offset para buscar o próximo lote de registros
params$offset <- params$offset + params$limit
} else {
# Se não houver mais registros, sair do loop
break
}
} else {
cat("Erro ao acessar a API no ano", ano, ". Código de status:", status_code(response), "\n")
break
}
}
}
View(all_licitacoes)
library(httr)
library(jsonlite)
library(dplyr)
# Definir a URL base da API
base_url <- "https://transparencia.al.gov.br/licitacao/json-editais/"
# Inicializar um dataframe vazio para armazenar os resultados
all_licitacoes <- data.frame()
# Loop para buscar dados ano a ano
for (ano in 2020:2025) {
# Definir parâmetros para o intervalo do ano
params <- list(
limit = 100,   # Número de registros por requisição
offset = 0,    # Paginação inicial
data_realizacao_dti_ = paste0("01/01/", ano),  # Data inicial (dd/mm/yyyy)
data_realizacao_dtf_ = paste0("31/12/", ano)   # Data final (dd/mm/yyyy)
)
repeat {
# Fazer a requisição HTTP GET com o cabeçalho necessário
response <- GET(base_url, query = params, add_headers(
`User-Agent` = "Mozilla/5.0",
`X-Requested-With` = "XMLHttpRequest"
))
# Verificar se a requisição foi bem-sucedida
if (status_code(response) == 200) {
# Converter a resposta JSON para texto
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Verificar se há registros na resposta
if (!is.null(json_data$rows) && length(json_data$rows) > 0) {
# Transformar JSON em dataframe e adicionar ao dataframe principal
licitacoes_df <- as.data.frame(json_data$rows)
all_licitacoes <- bind_rows(all_licitacoes, licitacoes_df)
# Atualizar o offset para buscar o próximo lote de registros
params$offset <- params$offset + params$limit
} else {
# Se não houver mais registros, sair do loop
break
}
} else {
cat("Erro ao acessar a API no ano", ano, ". Código de status:", status_code(response), "\n")
break
}
}
}
library(httr)
library(jsonlite)
library(dplyr)
# Definir a URL base da API
base_url <- "https://transparencia.al.gov.br/licitacao/json-editais/"
# Inicializar um dataframe vazio para armazenar os resultados
all_licitacoes <- data.frame()
# Loop para buscar dados ano a ano
for (ano in 2020:2025) {
# Definir parâmetros para o intervalo do ano
params <- list(
limit = 100,   # Número de registros por requisição
offset = 0,    # Paginação inicial
data_realizacao_dti_ = paste0("01/01/", ano),  # Data inicial (dd/mm/yyyy)
data_realizacao_dtf_ = paste0("31/12/", ano)   # Data final (dd/mm/yyyy)
)
repeat {
# Fazer a requisição HTTP GET com o cabeçalho necessário
response <- GET(base_url, query = params, add_headers(
`User-Agent` = "Mozilla/5.0",
`X-Requested-With` = "XMLHttpRequest"
))
# Verificar se a requisição foi bem-sucedida
if (status_code(response) == 200) {
# Converter a resposta JSON para texto
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Verificar se há registros na resposta
if (!is.null(json_data$rows) && length(json_data$rows) > 0) {
# Transformar JSON em dataframe e adicionar ao dataframe principal
licitacoes_df <- as.data.frame(json_data$rows)
all_licitacoes <- bind_rows(all_licitacoes, licitacoes_df)
# Atualizar o offset para buscar o próximo lote de registros
params$offset <- params$offset + params$limit
} else {
# Se não houver mais registros, sair do loop
break
}
} else {
cat("Erro ao acessar a API no ano", ano, ". Código de status:", status_code(response), "\n")
break
}
}
}
library(httr)
library(jsonlite)
library(dplyr)
# Definir a URL base da API
base_url <- "https://transparencia.al.gov.br/licitacao/json-editais/"
# Inicializar um dataframe vazio para armazenar os resultados
all_licitacoes <- data.frame()
# Loop para buscar dados ano a ano
for (ano in 2020:2025) {
# Definir parâmetros para o intervalo do ano
params <- list(
limit = 100,   # Número de registros por requisição
offset = 0,    # Paginação inicial
data_realizacao_dti_ = paste0("01/01/", ano),  # Data inicial (dd/mm/yyyy)
data_realizacao_dtf_ = paste0("31/12/", ano)   # Data final (dd/mm/yyyy)
)
repeat {
# Fazer a requisição HTTP GET com o cabeçalho necessário
response <- GET(base_url, query = params, add_headers(
`User-Agent` = "Mozilla/5.0",
`X-Requested-With` = "XMLHttpRequest"
))
# Verificar se a requisição foi bem-sucedida
if (status_code(response) == 200) {
# Converter a resposta JSON para texto
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Verificar se há registros na resposta
if (!is.null(json_data$rows) && length(json_data$rows) > 0) {
# Transformar JSON em dataframe e adicionar ao dataframe principal
licitacoes_df <- as.data.frame(json_data$rows)
all_licitacoes <- bind_rows(all_licitacoes, licitacoes_df)
# Atualizar o offset para buscar o próximo lote de registros
params$offset <- params$offset + params$limit
} else {
# Se não houver mais registros, sair do loop
break
}
} else {
cat("Erro ao acessar a API no ano", ano, ". Código de status:", status_code(response), "\n")
break
}
}
}
library(httr)
library(jsonlite)
library(dplyr)
# Definir a URL base da API
base_url <- "https://transparencia.al.gov.br/licitacao/json-editais/"
# Inicializar um dataframe vazio para armazenar os resultados
all_licitacoes <- data.frame()
# Loop para buscar dados ano a ano
for (ano in 2020:2025) {
# Definir parâmetros para o intervalo do ano
params <- list(
limit = 100,   # Número de registros por requisição
offset = 0,    # Paginação inicial
data_realizacao_dti_ = paste0("01/01/", ano),  # Data inicial (dd/mm/yyyy)
data_realizacao_dtf_ = paste0("31/12/", ano)   # Data final (dd/mm/yyyy)
)
repeat {
# Fazer a requisição HTTP GET com o cabeçalho necessário
response <- GET(base_url, query = params, add_headers(
`User-Agent` = "Mozilla/5.0",
`X-Requested-With` = "XMLHttpRequest"
))
# Verificar se a requisição foi bem-sucedida
if (status_code(response) == 200) {
# Converter a resposta JSON para texto
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Verificar se há registros na resposta
if (!is.null(json_data$rows) && length(json_data$rows) > 0) {
# Transformar JSON em dataframe e adicionar ao dataframe principal
licitacoes_df <- as.data.frame(json_data$rows)
all_licitacoes <- bind_rows(all_licitacoes, licitacoes_df)
# Atualizar o offset para buscar o próximo lote de registros
params$offset <- params$offset + params$limit
} else {
# Se não houver mais registros, sair do loop
break
}
} else {
cat("Erro ao acessar a API no ano", ano, ". Código de status:", status_code(response), "\n")
break
}
}
}
library(httr)
library(jsonlite)
library(dplyr)
# Definir a URL base da API
base_url <- "https://transparencia.al.gov.br/licitacao/json-editais/"
# Inicializar um dataframe vazio para armazenar os resultados
all_licitacoes <- data.frame()
# Loop para buscar dados ano a ano
for (ano in 2024:2025) {
# Definir parâmetros para o intervalo do ano
params <- list(
limit = 100,   # Número de registros por requisição
offset = 0,    # Paginação inicial
data_realizacao_dti_ = paste0("01/01/", ano),  # Data inicial (dd/mm/yyyy)
data_realizacao_dtf_ = paste0("31/12/", ano)   # Data final (dd/mm/yyyy)
)
repeat {
# Fazer a requisição HTTP GET com o cabeçalho necessário
response <- GET(base_url, query = params, add_headers(
`User-Agent` = "Mozilla/5.0",
`X-Requested-With` = "XMLHttpRequest"
))
# Verificar se a requisição foi bem-sucedida
if (status_code(response) == 200) {
# Converter a resposta JSON para texto
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Verificar se há registros na resposta
if (!is.null(json_data$rows) && length(json_data$rows) > 0) {
# Transformar JSON em dataframe e adicionar ao dataframe principal
licitacoes_df <- as.data.frame(json_data$rows)
all_licitacoes <- bind_rows(all_licitacoes, licitacoes_df)
# Atualizar o offset para buscar o próximo lote de registros
params$offset <- params$offset + params$limit
} else {
# Se não houver mais registros, sair do loop
break
}
} else {
cat("Erro ao acessar a API no ano", ano, ". Código de status:", status_code(response), "\n")
break
}
}
}
View(licitacoes_df)
library(httr)
library(jsonlite)
library(dplyr)
# Definir a URL base da API
base_url <- "https://transparencia.al.gov.br/licitacao/json-editais/"
# Função para buscar dados por ano
fetch_data_by_year <- function(base_url, year) {
# Inicializar variáveis
params <- list(
limit = 100,   # Número de registros por requisição
offset = 0,    # Paginação inicial
data_realizacao_dti_ = paste0("01/01/", year),  # Data inicial (dd/mm/yyyy)
data_realizacao_dtf_ = paste0("31/12/", year)   # Data final (dd/mm/yyyy)
)
all_licitacoes <- data.frame()  # Dataframe vazio para armazenar resultados
max_iterations <- 1000          # Limite máximo de iterações para evitar loops infinitos
iteration <- 0                  # Contador de iterações
repeat {
iteration <- iteration + 1
# Verificar se atingiu o limite máximo de iterações
if (iteration > max_iterations) {
cat("Limite máximo de iterações atingido. Saindo do loop.\n")
break
}
# Fazer a requisição HTTP GET com o cabeçalho necessário
response <- GET(base_url, query = params, add_headers(
`User-Agent` = "Mozilla/5.0",
`X-Requested-With` = "XMLHttpRequest"
))
# Verificar se a requisição foi bem-sucedida
if (status_code(response) == 200) {
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
# Verificar se há registros na resposta
if (!is.null(json_data$rows) && length(json_data$rows) > 0) {
licitacoes_df <- as.data.frame(json_data$rows)
all_licitacoes <- bind_rows(all_licitacoes, licitacoes_df)
# Atualizar o offset para buscar o próximo lote
params$offset <- params$offset + params$limit
} else {
# Se não houver mais registros, sair do loop
cat("Nenhum registro adicional encontrado. Saindo do loop.\n")
break
}
} else {
cat("Erro ao acessar a API no ano", year, ". Código de status:", status_code(response), "\n")
break
}
}
return(all_licitacoes)
}
# Loop para buscar dados de múltiplos anos
all_years_licitacoes <- data.frame()  # Dataframe consolidado
for (year in 2020:2025) {
cat("Buscando dados para o ano:", year, "\n")
licitacoes_for_year <- fetch_data_by_year(base_url, year)
if (nrow(licitacoes_for_year) > 0) {
all_years_licitacoes <- bind_rows(all_years_licitacoes, licitacoes_for_year)
cat("Registros obtidos para", year, ":", nrow(licitacoes_for_year), "\n")
} else {
cat("Nenhum registro encontrado para o ano:", year, "\n")
}
}
# Exibir as primeiras linhas do dataframe consolidado
print(head(all_years_licitacoes))
# Salvar os dados em um arquivo CSV (opcional)
write.csv(all_years_licitacoes, "editais_2020_a_2025.csv", row.names = FALSE)
cat("Total de registros obtidos:", nrow(all_years_licitacoes), "\n")
View(all_years_licitacoes)
library(httr)
library(jsonlite)
library(dplyr)
# Definir a URL base da API
base_url <- "https://transparencia.al.gov.br/licitacao/json-editais/"
# Função para buscar dados por ano
fetch_data_by_year <- function(base_url, year, max_retries = 3) {
params <- list(
limit = 100,
offset = 0,
data_realizacao_dti_ = paste0("01/01/", year),
data_realizacao_dtf_ = paste0("31/12/", year)
)
all_licitacoes <- data.frame()
max_iterations <- 1000
iteration <- 0
retries <- 0
repeat {
iteration <- iteration + 1
if (iteration > max_iterations) {
cat("Limite máximo de iterações atingido. Saindo do loop.\n")
break
}
# Fazer requisição HTTP GET com User-Agent atualizado
response <- GET(base_url, query = params, add_headers(
`User-Agent` = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
`X-Requested-With` = "XMLHttpRequest"
))
# Verifica se a resposta é bem-sucedida
if (status_code(response) == 200) {
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
if (!is.null(json_data$rows) && length(json_data$rows) > 0) {
licitacoes_df <- as.data.frame(json_data$rows)
all_licitacoes <- bind_rows(all_licitacoes, licitacoes_df)
params$offset <- params$offset + params$limit
} else {
cat("Nenhum registro adicional encontrado. Saindo do loop.\n")
break
}
} else if (status_code(response) == 502 && retries < max_retries) {
# Tentar novamente caso erro 502 ocorra
retries <- retries + 1
cat("Erro 502 (Bad Gateway) no ano", year, ". Tentativa", retries, "de", max_retries, "\n")
Sys.sleep(5) # Aguarda antes de tentar novamente
} else {
cat("Erro ao acessar a API no ano", year, ". Código de status:", status_code(response), "\n")
print(content(response, as = "text", encoding = "UTF-8")) # Mostra detalhes do erro
break
}
}
return(all_licitacoes)
}
# Loop para buscar dados de múltiplos anos
all_years_licitacoes <- data.frame()
for (year in 2020:2025) {
cat("\nBuscando dados para o ano:", year, "\n")
licitacoes_for_year <- fetch_data_by_year(base_url, year)
if (nrow(licitacoes_for_year) > 0) {
all_years_licitacoes <- bind_rows(all_years_licitacoes, licitacoes_for_year)
cat("Registros obtidos para", year, ":", nrow(licitacoes_for_year), "\n")
} else {
cat("Nenhum registro encontrado para o ano:", year, "\n")
}
Sys.sleep(2) # Evita bloqueios por excesso de requisições
}
# Exibir as primeiras linhas do dataframe consolidado
print(head(all_years_licitacoes))
# Salvar os dados em um arquivo CSV
write.csv(all_years_licitacoes, "editais_2020_a_2025.csv", row.names = FALSE)
cat("Total de registros obtidos:", nrow(all_years_licitacoes), "\n")
